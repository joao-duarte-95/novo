package pt.ulisboa.tecnico.learnjava.sibs.CLI;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;

import pt.ulisboa.tecnico.learnjava.bank.domain.Bank;
import pt.ulisboa.tecnico.learnjava.bank.domain.Client;
import pt.ulisboa.tecnico.learnjava.bank.exceptions.AccountException;
import pt.ulisboa.tecnico.learnjava.bank.exceptions.BankException;
import pt.ulisboa.tecnico.learnjava.bank.exceptions.ClientException;
import pt.ulisboa.tecnico.learnjava.bank.services.Services;
import pt.ulisboa.tecnico.learnjava.sibs.cli.associateMBWAYController;
import pt.ulisboa.tecnico.learnjava.sibs.domain.Sibs;

public class associateMBWAYControllerTests {
	
	@Before
	public void setUp() throws BankException, AccountException, ClientException {
		this.services = new Services();
		this.sibs = new Sibs(100, services);
		this.sourceBank = new Bank("CGD");
		this.targetBank = new Bank("BPI");
		this.sourceClient = new Client(this.sourceBank, FIRST_NAME, LAST_NAME, NIF, PHONE_NUMBER, ADDRESS, 33);
		this.targetClient = new Client(this.targetBank, FIRST_NAME, LAST_NAME, NIF, PHONE_NUMBER, ADDRESS, 22);
	}
	
	@Test
	public associateMBWAYControllerTests() {
		associateMBWAYController a = new associateMBWAYController();
		Services mockServices = mock(Services.class);
		when(mockServices.accountValidation("source", "target")).thenReturn(true);
		Client mockClient = mock(Client.class);
		a.associateMBWAY("source", "123456789", mockServices);
		verify(mockClient).setMbayCode(a.getCode());;
		
	}

}
